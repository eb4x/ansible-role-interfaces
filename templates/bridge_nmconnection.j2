# {{ ansible_managed }}

[connection]
id={{ item.device }}
type=bridge
interface-name={{ item.device }}
{% if item.zone is defined %}
zone={{ item.zone }}
{% endif %}

{% if item.mtu is defined %}
[ethernet]
mtu={{ item.mtu }}
{% endif %}

[bridge]
interface-name={{ item.device }}
{% if item.stp is defined %}
stp={{ item.stp }}
{% endif %}

[ipv4]
{% if item.bootproto == 'dhcp' %}
method=auto
{% elif item.bootproto == 'static' and item.address is defined and item.address | length %}
method=manual
{%   if item.netmask is defined %}
address1={{ (item.address ~'/'~ item.netmask) | ipaddr('host/prefix') }}
{%   endif %}
{%   if item.gateway is defined and item.gateway | length %}
gateway={{ item.gateway }}
{%   endif %}
{% else %}
method=disabled
{% endif %}
{% for route in item.route | default([]) %}
{%   set route_options = [] %}
{%   for option in route.options | default([]) %}
{%     if option is mapping %}
{#       We're gonna assume it's a mapping of one key with value, and     #}
{#       since dict2items returns a array, we're selecting the first item #}
{%       set option = option | dict2items | first %}
{%       set _ = route_options.append(option.key ~ '=' ~ option.value) %}
{%     elif option in ['onlink', 'lock-window', 'lock-cwdn', 'lock-mtu'] %}
{%       set _ = route_options.append(option ~ '=true') %}
{%     else %}
{%       set _ = route_options.append(option) %}
{%     endif %}
{%   endfor %}
{#   TODO: dev #}
{%   if 'gateway' in route %}
route{{ loop.index }}={{ (route.network ~'/'~ route.netmask) | ipaddr('network/prefix') }},{{ route.gateway }}
{%   endif %}
{%   if 'table' in route %}
{#     networkmanager wants a table id, so we need to find it in interfaces_route_tables #}
{%     set table_id = (interfaces_route_tables | selectattr('name', 'equalto', route.table) | first).id %}
{%     set _ = route_options.append('table=' ~ table_id) %}
{%   endif %}
{%   if route_options | length %}
route{{ loop.index }}_options={{ route_options | join(',') }}
{%   endif %}
{% endfor %}
{% for rule in item.rules | default([]) %}
{%   if rule is mapping %}
{#     networkmanager wants a table id, so we need to find it in interfaces_route_tables #}
{%     set table_id = (interfaces_route_tables | selectattr('name', 'equalto', rule.table) | first).id %}
{%     if rule.to is defined %}
routing-rule{{ loop.index }}=priority {{ rule.priority | default(32765 - loop.index0) }} to {{ rule.to }} table {{ table_id }}
{%     endif %}
{%     if rule.from is defined %}
routing-rule{{ loop.index }}=priority {{ rule.priority | default(32765 - loop.index0) }} from {{ rule.from }} table {{ table_id }}
{%     endif %}
{%   else %}
routing-rule{{ loop.index }}=priority {{ 32765 - loop.index0 }} {{ rule }}
{%   endif %}
{% endfor %}
{% if item.dnsnameservers is defined %}
dns={{ item.dnsnameservers | join(',') }}
{% endif %}

[ipv6]
{% if item.ip6 is defined %}
method={{ (item.bootproto == 'static') | ternary('manual', 'auto') }}
{%   if item.ip6.address is defined and item.ip6.netmask is defined %}
address1={{ (item.ip6.address ~'/'~ item.ip6.netmask) | ipaddr('host/prefix') }}
{%   endif %}
{%   if item.ip6.gateway is defined %}
gateway={{ item.ip6.gateway }}
{%   endif %}
{%   for route in item.ip6.route | default([]) %}
{%     if 'gateway' in route %}
route{{ loop.index }}={{ (route.network ~'/'~ route.netmask) | ipaddr('network/prefix') }},{{ route.gateway }}
{%     endif %}
{#     TODO: dev, table, options #}
{%   endfor %}
{% else %}
method=disabled
{% endif %}
